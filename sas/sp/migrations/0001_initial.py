# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import datetime
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdditionalCourse',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('course_category', models.CharField(max_length=3)),
                ('course_number', models.CharField(max_length=6)),
                ('unique', models.CharField(max_length=5)),
                ('course_type', models.CharField(max_length=3)),
                ('credit_hours', models.IntegerField(default=0, null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)])),
                ('countable', models.CharField(max_length=1, choices=[(b'Y', b'Yes'), (b'N', b'No')])),
                ('min_grade_required', models.CharField(max_length=2)),
                ('pass_fail_accepted', models.CharField(max_length=1)),
                ('grade', models.CharField(max_length=2)),
            ],
            options={
                'abstract': False,
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AdditionalCourseLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('course_category', models.CharField(max_length=3)),
                ('course_number', models.CharField(max_length=6)),
                ('unique', models.CharField(max_length=5)),
                ('course_type', models.CharField(max_length=3)),
                ('credit_hours', models.IntegerField(validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)])),
                ('countable', models.BooleanField(default=False)),
                ('min_grade_required', models.CharField(max_length=2)),
                ('pass_fail_accepted', models.BooleanField(default=False)),
                ('grade', models.CharField(max_length=12)),
            ],
            options={
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Athlete',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('uin', models.CharField(max_length=16)),
                ('ncaa_id', models.CharField(max_length=10)),
                ('sri', models.IntegerField(validators=[django.core.validators.MaxValueValidator(999999999), django.core.validators.MinValueValidator(0)])),
                ('eid', models.CharField(max_length=8)),
                ('name', models.CharField(max_length=25)),
            ],
            options={
                'ordering': ['name'],
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AthleteCcyys',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ccyys', models.IntegerField(validators=[django.core.validators.MaxValueValidator(99999), django.core.validators.MinValueValidator(0)])),
                ('num_ft_semesters', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(30), django.core.validators.MinValueValidator(0)])),
                ('athlete', models.ForeignKey(to='sp.Athlete')),
            ],
            options={
                'ordering': ['ccyys', 'athlete'],
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AthleteCcyysAdmin',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created_by', models.CharField(max_length=8, null=True, blank=True)),
                ('created_by_date', models.DateTimeField(null=True, blank=True)),
                ('routed_to_dean_by', models.CharField(max_length=8, null=True, blank=True)),
                ('routed_to_dean_by_date', models.DateTimeField(null=True, blank=True)),
                ('approved_by_dean', models.CharField(max_length=8, null=True, blank=True)),
                ('approved_by_dean_date', models.DateTimeField(null=True, blank=True)),
                ('routed_to_reg_by', models.CharField(max_length=8, null=True, blank=True)),
                ('routed_to_reg_by_date', models.DateTimeField(null=True, blank=True)),
                ('approved_by_reg', models.CharField(max_length=8, null=True, blank=True)),
                ('approved_by_reg_date', models.DateTimeField(null=True, blank=True)),
                ('active', models.BooleanField(default=True)),
                ('total_countable_degree_hours', models.IntegerField(default=0, null=True, blank=True)),
                ('athlete_ccyys', models.ForeignKey(to='sp.AthleteCcyys')),
            ],
            options={
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AthleteCcyysSport',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sport', models.CharField(max_length=3)),
                ('sport_description', models.CharField(max_length=60)),
                ('athlete_ccyys', models.ForeignKey(to='sp.AthleteCcyys')),
            ],
            options={
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AthleteMajor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('major_code', models.CharField(max_length=5)),
                ('major_name', models.CharField(max_length=240)),
                ('minor', models.CharField(max_length=25)),
                ('catalog_begin', models.CharField(max_length=4, blank=True)),
                ('catalog_end', models.CharField(max_length=4, blank=True)),
                ('first_or_second', models.CharField(default=b'1', max_length=1)),
                ('grades_saved', models.BooleanField(default=False)),
                ('final_college_code', models.CharField(default=b'', max_length=1)),
                ('final_college_name', models.CharField(default=b'', max_length=240)),
                ('final_major_code', models.CharField(default=b'', max_length=5)),
                ('final_major_name', models.CharField(default=b'', max_length=54)),
                ('final_catalog_begin', models.CharField(max_length=4, blank=True)),
                ('final_catalog_end', models.CharField(max_length=4, blank=True)),
                ('athlete_ccyys_admin', models.ForeignKey(to='sp.AthleteCcyysAdmin')),
            ],
            options={
                'ordering': ['athlete_ccyys_admin__athlete_ccyys__athlete', 'major_name'],
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CcyysAdmin',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ccyys', models.IntegerField(validators=[django.core.validators.MaxValueValidator(99999), django.core.validators.MinValueValidator(0)])),
                ('athletics_open_date', models.DateField(default=datetime.date(9999, 12, 31), verbose_name=b'Athletics Student Services open date')),
                ('athletics_close_date', models.DateField(default=datetime.date(9999, 12, 31), verbose_name=b'Athletics Student Services close date')),
                ('dean_open_date', models.DateField(default=datetime.date(9999, 12, 31), verbose_name=b'College open date')),
                ('dean_close_date', models.DateField(default=datetime.date(9999, 12, 31), verbose_name=b'College close date')),
                ('reg_open_date', models.DateField(default=datetime.date(9999, 12, 31), verbose_name=b'Registrar open date')),
                ('reg_close_date', models.DateField(default=datetime.date(9999, 12, 31), verbose_name=b'Registrar close date')),
                ('forms_loaded', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['ccyys'],
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('form_id', models.PositiveIntegerField()),
                ('comments', models.CharField(max_length=250)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('editable', models.BooleanField(default=True)),
                ('form_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['-timestamp'],
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('course_category', models.CharField(max_length=3)),
                ('course_number', models.CharField(max_length=6)),
                ('unique', models.CharField(max_length=5)),
                ('course_type', models.CharField(max_length=3)),
                ('credit_hours', models.IntegerField(default=0, null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)])),
                ('countable', models.CharField(max_length=1, choices=[(b'Y', b'Yes'), (b'N', b'No')])),
                ('min_grade_required', models.CharField(max_length=2)),
                ('pass_fail_accepted', models.CharField(max_length=1)),
                ('grade', models.CharField(max_length=2)),
                ('major', models.ForeignKey(to='sp.AthleteMajor')),
            ],
            options={
                'abstract': False,
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CourseLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('course_category', models.CharField(max_length=3)),
                ('course_number', models.CharField(max_length=6)),
                ('unique', models.CharField(max_length=5)),
                ('course_type', models.CharField(max_length=3)),
                ('credit_hours', models.IntegerField(default=0, null=True, validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)])),
                ('countable', models.BooleanField(default=False)),
                ('min_grade_required', models.CharField(max_length=2)),
                ('pass_fail_accepted', models.BooleanField(default=False)),
                ('grade', models.CharField(max_length=12)),
            ],
            options={
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='FinalCourse',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('course_category', models.CharField(max_length=3)),
                ('course_number', models.CharField(max_length=6)),
                ('unique', models.CharField(max_length=5)),
                ('credit_hours', models.IntegerField(validators=[django.core.validators.MaxValueValidator(9), django.core.validators.MinValueValidator(0)])),
                ('athlete_ccyys', models.ForeignKey(to='sp.AthleteCcyys')),
            ],
            options={
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('code', models.CharField(max_length=5, db_index=True)),
                ('short_desc', models.CharField(max_length=16)),
                ('long_desc', models.CharField(max_length=54)),
                ('full_title', models.CharField(max_length=100)),
                ('begin_ccyys', models.IntegerField()),
                ('end_ccyys', models.IntegerField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PercentDegree',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created_by', models.CharField(max_length=8, null=True, blank=True)),
                ('created_by_date', models.DateTimeField(null=True, blank=True)),
                ('routed_to_dean_by', models.CharField(max_length=8, null=True, blank=True)),
                ('routed_to_dean_by_date', models.DateTimeField(null=True, blank=True)),
                ('approved_by_dean', models.CharField(max_length=8, null=True, blank=True)),
                ('approved_by_dean_date', models.DateTimeField(null=True, blank=True)),
                ('routed_to_reg_by', models.CharField(max_length=8, null=True, blank=True)),
                ('routed_to_reg_by_date', models.DateTimeField(null=True, blank=True)),
                ('approved_by_reg', models.CharField(max_length=8, null=True, blank=True)),
                ('approved_by_reg_date', models.DateTimeField(null=True, blank=True)),
                ('active', models.BooleanField(default=True)),
                ('projected_countable_hours', models.IntegerField(default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_hours_required', models.IntegerField(default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('projected_percentage', models.FloatField(default=0, null=True)),
                ('final_countable_hours', models.IntegerField(default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('final_percentage', models.FloatField(default=0, null=True)),
                ('major', models.ForeignKey(to='sp.AthleteMajor')),
            ],
            options={
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('code', models.CharField(unique=True, max_length=1, db_index=True)),
                ('name', models.CharField(max_length=240)),
                ('begin_ccyys', models.IntegerField()),
                ('end_ccyys', models.IntegerField()),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SpdFormLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('update_datetime', models.DateTimeField(auto_now_add=True)),
                ('updater', models.CharField(default=b'Unknown', max_length=8)),
                ('school_code', models.CharField(max_length=1, blank=True)),
                ('school_name', models.CharField(max_length=240, blank=True)),
                ('major_code', models.CharField(max_length=5, blank=True)),
                ('major_name', models.CharField(max_length=54, blank=True)),
                ('minor', models.CharField(max_length=25, blank=True)),
                ('catalog_begin', models.CharField(max_length=4, blank=True)),
                ('catalog_end', models.CharField(max_length=4, blank=True)),
                ('projected_countable_hours', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_hours_required', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('projected_percentage', models.DecimalField(null=True, max_digits=5, decimal_places=2)),
                ('final_countable_hours', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('final_percentage', models.DecimalField(null=True, max_digits=5, decimal_places=2)),
                ('percent_degree', models.ForeignKey(blank=True, to='sp.PercentDegree', null=True)),
                ('spd_form', models.ForeignKey(to='sp.AthleteCcyysAdmin')),
            ],
            options={
                'ordering': ['-pk'],
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('uin', models.CharField(unique=True, max_length=16, verbose_name=b'UIN')),
                ('eid', models.CharField(unique=True, max_length=8, verbose_name=b'EID')),
                ('name', models.CharField(max_length=25, verbose_name=b'name')),
                ('type', models.CharField(default=b'A', max_length=1, verbose_name=b'type', choices=[(b'A', b'Athletic Student Services'), (b'D', b'College'), (b'R', b'Registrar Staff')])),
                ('active', models.BooleanField(default=True, verbose_name=b'active')),
                ('email', models.EmailField(default=b'', max_length=75, verbose_name=b'email')),
                ('school', models.ForeignKey(default=None, blank=True, to='sp.School', null=True)),
            ],
            options={
                'db_tablespace': 'regs_spform_data',
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='major',
            name='school',
            field=models.ForeignKey(to='sp.School'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='major',
            unique_together=set([('school', 'code')]),
        ),
        migrations.AddField(
            model_name='courselog',
            name='spd_form_log',
            field=models.ForeignKey(to='sp.SpdFormLog'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='comments',
            name='user',
            field=models.ForeignKey(to='sp.User'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='athletemajor',
            name='school',
            field=models.ForeignKey(to='sp.School'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='athleteccyyssport',
            unique_together=set([('athlete_ccyys', 'sport')]),
        ),
        migrations.AddField(
            model_name='additionalcourselog',
            name='spd_form_log',
            field=models.ForeignKey(to='sp.SpdFormLog'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='additionalcourse',
            name='major',
            field=models.ForeignKey(to='sp.AthleteMajor'),
            preserve_default=True,
        ),
    ]
